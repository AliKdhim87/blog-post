name: Deploy ALI-DEV
on: [ push, pull_request ]
jobs:
  vercel:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - name: Create env file
      run: |
         touch .env
         echo SCHEMA_URL=${{ secrets.SCHEMA_URL }} >> .env
         cat .env
    - name: Build
      run: |
          npm run codegen
          npm run build
    - name: Start Deployment
      uses: bobheadxi/deployments@v0.4.3
      id: deployment
      with:
        step: start
        token: ${{ secrets.GITHUB_TOKEN }}
        env: Production
    - name: Deploy to Staging
      uses: amondnet/vercel-action@v20
      id: deploy-vercel-staging
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        scope: ${{ secrets.VERCEL_ORG_ID }}
    - name: Run Tests Against Vercel
      env:
        VERCEL_URL: ${{ steps.deploy-vercel-staging.outputs.preview-url }}
      run: npm run test
    - name: Deploy to Production
      uses: amondnet/vercel-action@v20
      id: deploy-vercel-production
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        scope: ${{ secrets.VERCEL_ORG_ID }}
# Update deployment status
    - name: Update Deployment Status
      uses: bobheadxi/deployments@v0.4.3
      if: always()
      with:
        step: finish
        token: ${{ secrets.GITHUB_TOKEN }}
        status: ${{ job.status }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
        env_url: ${{ steps.vercel-action.outputs.preview-url }}